haeuf_passverhalten
arithMittel_Passverhalten <- (summePass/anzahlSpielerPass )
arithMittel_Passverhalten
anzahlSpielerPass
sort(passverhalten)
sort_passverhalten[25]
sort_passverhalten <- sort(passverhalten)
sort_passverhalten[25]
median_Passverhalten <- 1/2*(sort_passverhalten[anzahlSpielerPass/2]+(sort_passverhalten[(anzahlSpielerPass/2)+1]
#Der Zentralwert ist 60
barplot(haeuf_passverhalten)
median_Passverhalten <- 1/2*(sort_passverhalten[anzahlSpielerPass/2]+sort_passverhalten[(anzahlSpielerPass/2)+1])
median_Passverhalten
arithMittel_Passverhalten
arithMittel_Passverhalten <- round((summePass/anzahlSpielerPass ), digits = 0)
arithMittel_Passverhalten
median_Passverhalten <- round(1/2*(sort_passverhalten[anzahlSpielerPass/2]+sort_passverhalten[(anzahlSpielerPass/2)+1]), digits = 0)
median_Passverhalten
anzahlSpielerStrecke <- length(strecke)
anzahlSpielerStrecke
median_Passverhalten <- sort_passverhalten[(anzahlSpielerPass+1)/2]
median_Passverhalten
median_Passverhalten <- sort_passverhalten[(anzahlSpielerPass+1)/2]
median_Passverhalten
anzahlSpielerStrecke <- length(strecke)
sort_strecke <- sort(strecke)
median_Passverhalten <- sort_strecke[(anzahlSpielerStrecke+1)/2]
median_Passverhalten
arithMittel_Strecke <- round((summeStrecke/anzahlSpielerStrecke ), digits = 1)
summeStrecke <- sum(strecke)
arithMittel_Strecke <- round((summeStrecke/anzahlSpielerStrecke ), digits = 1)
arithMittel_Strecke
#Passverhalten
passverhalten <- fussball3$PASSES.COMPLETED[-c(which(is.na(fussball$PASSES.COMPLETED)))]
anzahlSpielerPass <- length(passverhalten)
haeuf_passverhalten <- table(passverhalten)
#die Tabelle gibt an wie viele Spieler wie viele Pässe insgesamt gespielt hatten. Der Modus ist 36, denn das ist der Wert der am häufigsten in der Tabelle vorkommt.
mean(passverhalten)
summePass <- sum(passverhalten)
arithMittel_Passverhalten <- round((summePass/anzahlSpielerPass ), digits = 0)
#Im durchschnitt passt ein Spieler 84 mal
median(passverhalten)
sort_passverhalten <- sort(passverhalten)
median_Passverhalten <- round(1/2*(sort_passverhalten[anzahlSpielerPass/2]+sort_passverhalten[(anzahlSpielerPass/2)+1]), digits = 0)
#Der Zentralwert ist 60
barplot(haeuf_passverhalten)
#Im Balkendiagramm werden in den Balken die einzelnen Spieler dargestellt wie viele Pässe sie gespielt haben.
#Man erkennt eine linkssteile Verteilung, auch die Bedingung dazu, Modus< Median < arith. Mittel, trifft zu, 36< 60< 84.
min(passverhalten)
#Die geringste Anzahl an gespielten Pässen ist 1, das bedeutet, dass alle Spieler, abgesehen von den Spielern, zu denen es kein Wert gibt, haben mindestens 1 Pass gespielt.
max( passverhalten)
#Die höchste Anzahl an gespielten Pässen ist 562, das bedeutet es gib Spieler, die 652 Pässe gespielt haben.
max(passverhalten) - min(passverhalten)
#Der Abstand zwischen dem niedrigsten Wert und dem höchsten Wert beträgt 561
quantile(passverhalten)
#0% zeigt noch mal dem kleinsten Wert,100% den höchsten und 50% den Median. Bei dem 0.25 Quantil kann man schlussfolgern, dass 25% der Spieler 29 oder weniger Pässe gespielt haben und bei dem 0.75 Quantil 75% ca 118 oder weniger Pässe gespielt haben.
IQR(passverhalten)
boxplot(passverhalten)
#Das Boxplot stellt die Werte, die mit der Funktion quantile() berechnet wurden und den IQR, graphisch dar. Leider stimmt ein Wert nicht überein, das Maximum liegt in der Grafik bei ca 260, und das berechnete Maximum war 562. Das liegt daran, dass alle Werte zur Ermittlung des Maximums berücksichtigt werden aber in der Grafik die Werte die Größer als das dargestellte Maximum sind als Ausreisser dargestellt.
#mittlere absolute Abweichung
sum(abs(passverhalten-arithMittel_Passverhalten))/anzahlSpielerPass
#empirische Varianz
sum(abs(passverhalten-arithMittel_Passverhalten)^2)/(anzahlSpielerPass)
#Stichprobenvarianz
sum(abs(passverhalten-arithMittel_Passverhalten)^2)/(anzahlSpielerPass-1)
var(passverhalten)
#Standartabweichnung
sqrt(var(passverhalten))
sd(passverhalten)
#Variationskoeffizien
sd(passverhalten)/median_Passverhalten
median(passverhalten)
#Strecke
strecke <- fussball3$DISTANCE.COVERED[-c(which(is.na(fussball$DISTANCE.COVERED)))]
anzahlSpielerStrecke <- length(strecke)
haeuf_strecke <- table(strecke)
#die Tabelle gibt an wie viele Spieler wie viele Distanzen in km hinterlegt haben. Der Modus ist 9,5, denn das ist der Wert der am häufigsten in der Tabelle vorkommt.
mean(strecke)
summeStrecke <- sum(strecke)
arithMittel_Strecke <- round((summeStrecke/anzahlSpielerStrecke ), digits = 1)
#Im durchschnitt legt ein Spieler eine Distanz von ca 23,3 Km zurück
median(strecke)
sort_strecke <- sort(strecke)
median_Strecke <- sort_strecke[(anzahlSpielerStrecke+1)/2]
#Der Zentralwert ist 20,6
plot(haeuf_strecke)
#Im Balkendiagramm werden in den Balken die einzelnen Spieler dargestellt wie viele Kilometer sie zurückgelegt haben. Man erkennt eine linkssteile Verteilung, auch die Bedingung dazu, Modus< Median < arith. Mittel, trifft zu, 9,5< 20,6< 23,3.
max(strecke)
#Die größte hinterlegte Distanz ist 84 km, das bedeutet es gib Spieler, die 84km zurückgelegt haben.
min(strecke)
#Die geringste hinterlegte Distanz ist 0,1km , das bedeutet, dass alle Spieler, abgesehen von den Spielern, zu denen es kein Wert gibt, sind mindestens 01 km gelaufen.
max(strecke) - min(trecke)
#Strecke
strecke <- fussball3$DISTANCE.COVERED[-c(which(is.na(fussball$DISTANCE.COVERED)))]
anzahlSpielerStrecke <- length(strecke)
haeuf_strecke <- table(strecke)
#die Tabelle gibt an wie viele Spieler wie viele Distanzen in km hinterlegt haben. Der Modus ist 9,5, denn das ist der Wert der am häufigsten in der Tabelle vorkommt.
mean(strecke)
summeStrecke <- sum(strecke)
arithMittel_Strecke <- round((summeStrecke/anzahlSpielerStrecke ), digits = 1)
#Im durchschnitt legt ein Spieler eine Distanz von ca 23,3 Km zurück
median(strecke)
sort_strecke <- sort(strecke)
median_Strecke <- sort_strecke[(anzahlSpielerStrecke+1)/2]
#Der Zentralwert ist 20,6
plot(haeuf_strecke)
#Im Balkendiagramm werden in den Balken die einzelnen Spieler dargestellt wie viele Kilometer sie zurückgelegt haben. Man erkennt eine linkssteile Verteilung, auch die Bedingung dazu, Modus< Median < arith. Mittel, trifft zu, 9,5< 20,6< 23,3.
max(strecke)
#Die größte hinterlegte Distanz ist 84 km, das bedeutet es gib Spieler, die 84km zurückgelegt haben.
min(strecke)
#Die geringste hinterlegte Distanz ist 0,1km , das bedeutet, dass alle Spieler, abgesehen von den Spielern, zu denen es kein Wert gibt, sind mindestens 01 km gelaufen.
max(strecke) - min(strecke)
quantile(strecke)
#0% zeigt noch mal dem kleinsten Wert,100% den höchsten und 50% den Median. Bei dem 0.25 Quantil kann man schlussfolgern, dass 25% der Spieler 9,5km oder weniger gelaufen sind und bei dem 0.75 Quantil 75% eine Distanz von ca 32,3km oder weniger hintelegt haben.
IQR(strecke)
boxplot(strecke)
#Das Boxplot stellt die Werte, die mit der Funktion quantile() berechnet wurden und den IQR, graphisch dar. Leider stimmt ein Wert nicht überein, das Maximum liegt in der Grafik bei ca 65km, und das berechnete Maximum war 84kmx. Das liegt daran, dass alle Werte zur Ermittlung des Maximums berücksichtigt werden aber in der Grafik die Werte die Größer als das dargestellte Maximum sind als Ausreisser dargestellt.
#mittlere absolute Abweichung
sum(abs(strecke-arithMittel_Strecke))/anzahlSpielerStrecke
#empirische Varianz
sum(abs(strecke-arithMittel_Strecke)^2)/anzahlSpielerStrecke
#Stichprobenvarianz
sum(abs(strecke-arithMittel_Strecke)^2)/(anzahlSpielerStrecke-1)
var(strecke)
#Standartabweichnung
sqrt(var(strecke))
sd(var(strecke))
#Variationskoeffizien
sd(strecke)/median_Strecke
sum(abs(strecke-arithMittel_Strecke)^2)/anzahlSpielerStrecke
sum(abs(strecke-arithMittel_Strecke)^2)/(anzahlSpielerStrecke-1)
sum(abs(strecke-arithMittel_Strecke)^2)/anzahlSpielerStrecke
sqrt(var(strecke))
sd(var(strecke))
sd(var(strecke))
sqrt(var(strecke))
sum(abs(strecke-arithMittel_Strecke)^2)/(anzahlSpielerStrecke-1)
sqrt(var(strecke))
round(sqrt(var(strecke)), digits= 1)
varianz_strecke <- sum(abs(strecke-arithMittel_Strecke)^2)/(anzahlSpielerStrecke-1)
round(sqrt(varianz_strecke), digits= 1)
varianz_pass <- sum(abs(passverhalten-arithMittel_Passverhalten)^2)/(anzahlSpielerPass-1)
round(sqrt(var(varianz_pass)), digits = 0)
round(sqrt(var(varianz_pass)), digits = 0)
varianz_pass
round(sqrt(varianz_pass), digits = 0)
data <- read.table('miete03.asc/Users/thiennguyen', header=TRUE)
data <- read.table('miete03.asc', header=TRUE)
data <- read.table('miete03.asc')
data <- read.table('miete03.asc')
knitr::opts_chunk$set(echo = TRUE)
fussball <- read.csv("players_fifa_worldcup_2014_ha.csv")
fussball <- read.csv("players_fifa_worldcup_2014_ha.csv")
fussball
fussball <- read.csv("players_fifa_worldcup_2014_ha.csv")
fussball
data
data <- read.table('miete03.asc')
data
fussball1 <- cbind(fussballmod, AVG.PASSES.COMPLETED.PER.GAME)
fussball1
fussball2 <-fussballmod[-c(which(is.na(fussball1$DISTANCE.COVERED)))]
AVG.DISTANCE.COVERED.PER.GAME <- c(round(fussball2$DISTANCE.COVERED/fussball2$MINUTES.PLAYED*90, digits = 2))
fussball3 <- cbind(fussball2, AVG.DISTANCE.COVERED.PER.GAME)
fussball3
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
Farbe <- c("hellweiß", "schwarzmetallic", "limette", "orange", "rot")
Farbe <- c("hellweiß", "schwarzmetallic", "limette", "orange", "rot")
Nennung <- c(130, 104, 325, 455, 286)
huellen_farben <- data.frame(Farbe, Nennung)
kable(huellen_farben)
kable(huellen_farben)
huellen_farben <- data.frame(Farbe, Nennung)
Nennung <- c(130, 104, 325, 455, 286)
kable(huellen_farben)
huellen_farben
huellen_farben
kable(huellen_farben)
barplot(huellen_farben)
huellen <- kable(huellen_farben)
barplot(huellen)
huellen_farben <- data.frame(Farbe, Nennung)
huellen_farben
plot(huellen)
plot(huellen, ylim = 500)
plot(huellen, ylim = NULL)
barplot(huellen_farben)
cbind(farbe, nennung)
Farbe <- c("hellweiß", "schwarzmetallic", "limette", "orange", "rot")
cbind(farbe, nennung)
cbind(Farbe, nennung)
cbind(Farbe, Nennung)
barplot(cbind(Farbe, Nennung))
huellen_farben <- data.frame(Farbe, Nennung)
huellen_farben
barplot(huellen_farben)
barplot(Nennung)
barplot(Nennung, Farbe )
View(pass_position)
barplot(Nennung, main = "Anzahl der Farbe", xlab = "Anzahl", ylab = "Farben")
barplot(Nennung, main = "Anzahl der Farbe", ylab = "Anzahl", xlab = "Farben")
applewood <- read.csv2("Applewood_2011.csv")
applewood
names(applewood)
dim(applewood)
dim(applewood)
str(applewood)
head(applewood)
View(applewood)
names(applewood)
head(applewood)
names(applewood)
dim(applewood)
dim(applewood)
head(applewood)
str(applewood)
View(applewood)
applewood <- read.csv2("Applewood_2011.csv")
applewood
names(applewood)
str(applewood)
names(applewood)
applewood <- read.csv2("Applewood_2011.csv")
applewood
table(huellen)
table(huellen_farben)
prop.table(applewood)
prop.table(applewood)
prop.table(applewood[-1])
table(applewood)
prop.table(applewood)
prop.table(applewood$Previous)
cumsum(applewood$Previous)
attach(applewood)
absH <- table(Previous)
absH
relH<- prop.table(Previous)
relH
relH<- round(prop.table(Previous),3)
relH
cumsum(absH)
cumsum(relH)
barplot(Previous)
barplot(Previous)
hist(Profit)
hist(Profit, main = "Umsatz", xlab = "Umsatz", ylab = "Anzahl")
hist(Profit, main = "Umsatz", xlab = "Umsatz", ylab = "absolute Häufigkeit")
hist(Profit, main = "Umsatz", xlab = "Umsatz", ylab = "absolute Häufigkeit", freq = FALSE)
hist(Profit, main = "Umsatz", xlab = "Umsatz", ylab = "absolute Häufigkeit", freq = FALSE)
b) Füge dem Befehl `hist()` aus a) das Argument `freq = FALSE` zu. Vergleiche das erzeugte Histogramm mit dem aus a). Was ist der Unterschied?
c) Variiere die Anzahl der Gruppen mit dem Argument `breaks` und vergleiche die resultierenden Histogramme.
d) Benutze das Argument `breaks`, um folgende Gruppen zu spezifizieren: (0, 250], (250, 500], ... (2750, 3000], (3000, 3500]. Erzeuge damit ein Histogramm and interpretiere die Höhe der Balken. Wie sind die Höhen der Balken über (2750, 3000] und (3000, 3500] zu vergleichen? Verändere das letzte Intervall von (3000, 3500] zu (3000, 5000]. Erkläre den Unterschied der Ergebnisse.
hist(Profit, main = "Umsatz", xlab = "Umsatz", ylab = "absolute Häufigkeit", breaks = 2)
hist(Profit, main = "Umsatz", xlab = "Umsatz", ylab = "absolute Häufigkeit", breaks = 100)
hist(Profit, main = "Umsatz", xlab = "Umsatz", ylab = "absolute Häufigkeit", breaks = 10)
hist(Profit, main = "Umsatz", xlab = "Umsatz", ylab = "absolute Häufigkeit", breaks = 1000)
hist(Profit, main = "Umsatz", xlab = "Umsatz", ylab = "absolute Häufigkeit", breaks = 14)
hist(Profit, main = "Umsatz", xlab = "Umsatz", ylab = "absolute Häufigkeit", breaks = 30)
hist(Profit, main = "Umsatz", xlab = "Umsatz", ylab = "absolute Häufigkeit", breaks = 15)
hist(Profit, main = "Umsatz", xlab = "Umsatz", ylab = "absolute Häufigkeit", breaks = 30)
ecdf(profile())
ecdf(Profit)
plot(ecdf(Profit))
knitr::opts_chunk$set(echo = TRUE)
stunden <- c(7, 55, 5, 8, 4, 10, 60, 7, 12, 5, 5, 10, 5, 5, 8, 10,
10, 7, 4, 6, 7, 5, 6, 10, 7, 3, 6, 6, 10,  9)
mean(stunden)
median(stunden)
hist(stunden)
hist(stunden,breaks = 30)
hist(stunden,breaks = 30
)
hist(stunden,breaks = 15
)
hist(stunden,breaks = 60
)
hist(stunden,breaks = 30
)
hist(stunden,breaks = 15
)
hist(stunden,breaks = 60
)
stunden <- c(7, , 5, 8, 4, 10, 7, 12, 5, 5, 10, 5, 5, 8, 10,
10, 7, 4, 6, 7, 5, 6, 10, 7, 3, 6, 6, 10,  9)
stunden <- c(7, 5, 8, 4, 10, 7, 12, 5, 5, 10, 5, 5, 8, 10,
10, 7, 4, 6, 7, 5, 6, 10, 7, 3, 6, 6, 10,  9)
mean(stunden)
median(stunden)
knitr::opts_chunk$set(echo = TRUE)
(prod(faktor))^(1/(n-1))
jahresende <- dax30[,5] # dax30$Jahresende
# Pfad zur Datei anpassen
dax30 <- read.csv("dax30.csv")
# Pfad zur Datei anpassen
dax30 <- read.csv("dax30.csv")
# Pfad zur Datei anpassen
dax30 <- read.csv("dax30.csv")
# Pfad zur Datei anpassen
dax30 <- read.csv("dax30.csv")
# Pfad zur Datei anpassen
dax30 <- read.csv("dax30.csv")
# Pfad zur Datei anpassen
dax30 <- read.csv("dax30.csv")
# Pfad zur Datei anpassen
dax30 <- read.csv("dax30.csv")
# Pfad zur Datei anpassen
dax30 <- read.csv("dax30.csv")
# Pfad zur Datei anpassen
dax30 <- read.csv("dax30.csv")
# Pfad zur Datei anpassen
dax30 <- read.csv("dax30.csv")
dax30
# benutze alternativ den Dialog zum Öffnen einer Datei
dax30 <- read.csv(file.choose())
# Pfad zur Datei anpassen
dax30 <- read.csv("dax30.csv")
# benutze alternativ den Dialog zum Öffnen einer Datei
dax30 <- read.csv(file.choose())
dax30
boxplot(dax30$Tiefstkurs, dax30$Hoechstkurs,  range = 0)
jahresende <- dax30[,5] # dax30$Jahresende
jahresende
jahr <- dax30$Jahr
n <- length(jahresende)
n
faktor <- jahresende[-1]/jahresende[-n]
faktor
(prod(faktor))^(1/(n-1))
# Benutze den richtigen Pfad in "bmw.csv" oder stattdessen file.choose()
bmw <- read.csv2("bmw.csv", header= T, sep= ";", dec=".")
bmw
# Benutze den richtigen Pfad in "bmw.csv" oder stattdessen file.choose()
bmw <- read.csv2("bmw.csv", header= T, sep= ";", dec=".")
bmw
file.choose()
bmw <-file.choose()
bmw
bmw
bmw <-file.choose()
b1 <- c(1,2,3,3,5,7,8,9)
b2 <- c(1,1,2,4,4,7,8)
quantile(b1)
quantile(b2)
bmw
b
bmw <-file.choose()
bmw
# Benutze den richtigen Pfad in "bmw.csv" oder stattdessen file.choose()
bmw <- read.csv2("bmw.csv", header= T, sep= ";", dec=".")
bmw <-file.choose()
bmw
library(knitr)
root.dir
bmw
# Benutze den richtigen Pfad in "bmw.csv" oder stattdessen file.choose()
bmw <- read.csv2("/Users/thiennguyen/Desktop/uni/Statistik/bmw.csv", header= T, sep= ";", dec=".")
bmw <-file.choose()
schluss <- bmw$Schluss
bmw
schluss <- bmw$Schluss
schluss
knitr::opts_chunk$set(echo = TRUE)
bmw <- read.csv2("bmw.csv", header= T, sep= ";", dec=".")
bmw
install.packages("ineq")
#a)
schluss <- bmw$Schluss
n <- length(schluss)
mitAbsAbweichung <- sum(abs(schluss - arithMittel))/n
arithMittel <- (mean(schluss))
n <- length(schluss)
mitAbsAbweichung <- sum(abs(schluss - arithMittel))/n
mitAbsAbweichung
Varianz <- sum((schluss- arithMittel)^2)/(n-1)
Varianz
Standartabweichung <- sqrt(Varianz)
Standartabweichung
#b)
Varianz2 <- var(schluss)
Varianz2
Standartabweichung2 <- sd(schluss)
Standartabweichung2
mittelwert_vw <- 174.56
standartabweichung_vw <- 10.28
mittelwert_bmw <- 36.96
standartabweichung_bmw <- 4.68
vKoeffizient_vw <- standartabweichung_vw/mittelwert_vw
vKoeffizient_vw
vKoeffizient_bmw <- standartabweichung_bmw/mittelwert_bmw
vKoeffizient_bmw
library(knitr)
zulassungen <- read.csv("neuzulassungen.csv")
kable(zulassungen)
zulassungen <-file.choose()
kable(zulassungen)
zulassungen
zulassungen <- read.csv("neuzulassungen.csv")
zulassungen <-file.choose()
zulassungen <- read.csv("neuzulassungen.csv")
zulassungen <-file.choose()
kable(zulassungen)
stueckzahl <- sort(zulassungen$Stueckzahl)
h <- rep(1,10)
install.packages("ineq")
zulassungen <- read.csv("neuzulassungen.csv")
zulassungen <-file.choose()
kable(zulassungen)
library(knitr)
kable(zulassungen)
plot(Lc(stueckzahl))
groessen <- c(182, 180, 182, 179, 185, 175, 184)
groessen
hist(groessen, breaks = seq(173.5, 185.5, 3))
hist(groessen, breaks = seq(173.5, 185.5, 3))
hist(groesse
)
hist(groesse)
knitr::opts_chunk$set(echo = TRUE)
data(Readiq)
library(BSDA)
install.packages("BSDA")
data(Readiq)
data(Readiq)
library(BSDA)
data(Readiq)
View(applewood)
würfe <- sample(50)
print(würfe)
würfe <- sample((1,2,3,4,5,6),50)
würfe <- sample((1,2,3,4,5,6),50)
print(würfe)
print(würfe)
print(würfe)
print(würfe)
print(würfe)
print(würfe)
print(würfe)
print(würfe)
print(würfe)
print(würfe)
print(würfe)
print(würfe)
print(würfe)
print(würfe)
print(würfe)
print(würfe)
print(würfe)
print(würfe)
würfe <- sample(60)
print(würfe)
würfe <- sample(6)
print(würfe)
würfe <- sample(6, 10)
print(würfe)
würfe <- sample(6, 2)
print(würfe)
würfe <- sample(6, 150)
print(würfe)
würfe <- sample(150, 6)
print(würfe)
knitr::opts_chunk$set(echo = TRUE)
meldungen <- c(5,6,10,12,12,13,10,13,8,13,11,10,11,5,19,13,10,12,
9,4,11,10,18,11,19,11,10,6,10,10,10,7,15,9,8,10,10,11,7,13,13,
8,8,10,16,7,13,13,11,11,12,10,8,8,9,8,12,10,18,10)
table(meldungen)
table(meldungen)
barplot(meldungen)
hist(meldungen)
var(meldungen)
knitr::opts_chunk$set(echo = TRUE)
dnorm(1)
install.packages("rmarkdown", dependencies = TRUE)
breast_cancer_data <- read.csv("~/Desktop/uni/Master/2. Semester/StoSta Stochastik und induktive Atatistik/projekt/Breast_Cancer/breast_cancer_data.csv", sep=";")
View(breast_cancer_data)
View(breast_cancer_data)
shiny::runApp('Desktop/uni/Master/2. Semester/StoSta Stochastik und induktive Atatistik/projekt/Breast_Cancer')
runApp('Desktop/uni/Master/2. Semester/StoSta Stochastik und induktive Atatistik/projekt/shiny_tut')
runApp('Desktop/uni/Master/2. Semester/StoSta Stochastik und induktive Atatistik/projekt/shiny_tut')
runApp('Desktop/uni/Master/2. Semester/StoSta Stochastik und induktive Atatistik/projekt/shiny_tut')
runApp('Desktop/uni/Master/2. Semester/StoSta Stochastik und induktive Atatistik/projekt/shiny_tut')
runApp('Desktop/uni/Master/2. Semester/StoSta Stochastik und induktive Atatistik/projekt/shiny_tut')
runApp('Desktop/uni/Master/2. Semester/StoSta Stochastik und induktive Atatistik/projekt/Breast_Cancer')
runApp('Desktop/uni/Master/2. Semester/StoSta Stochastik und induktive Atatistik/projekt/Breast_Cancer')
runApp('Desktop/uni/Master/2. Semester/StoSta Stochastik und induktive Atatistik/projekt/Breast_Cancer')
runApp('Desktop/uni/Master/2. Semester/StoSta Stochastik und induktive Atatistik/projekt/Breast_Cancer')
shiny::runApp('Desktop/uni/Master/2. Semester/StoSta Stochastik und induktive Atatistik')
runApp('Desktop/uni/Master/2. Semester/StoSta Stochastik und induktive Atatistik/stosta_gruppec/Breast_Cancer/stosta_gruppec.R')
library(shiny); runApp('stosta_gruppec.R')
library(shiny); runApp('stosta_gruppec.R')
library(shiny); runApp('stosta_gruppec.R')
library(shiny); runApp('stosta_gruppec.R')
library(shiny); runApp('stosta_gruppec.R')
runApp('~/Desktop/uni/Master/2. Semester/StoSta Stochastik und induktive Atatistik')
runApp('stosta_gruppec.R')
library(shiny); runApp('stosta_gruppec.R')
library(shiny); runApp('stosta_gruppec.R')
library(shiny); runApp('stosta_gruppec.R')
library(shiny); runApp('stosta_gruppec.R')
library(shiny); runApp('stosta_gruppec.R')
library(shiny); runApp('stosta_gruppec.R')
knitr::opts_chunk$set(echo = TRUE)
x <- seq(-5,5,0.1)
y <- dnorm(x)
plot(x,y, type = "l", lwd = 2, xlab = "Dichte", main = "Dichte der Standardnormalverteilung")
abline(v = qnorm(0.05))
abline(v = qnorm(0.95))
qnorm(0.05)
qnorm(0.95)
library(shiny); runApp('stosta_gruppec.R')
library(shiny); runApp('stosta_gruppec.R')
library(shiny); runApp('stosta_gruppec.R')
